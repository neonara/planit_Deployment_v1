version: '3.8'

services:
  # Redis service for caching and WebSocket channels
  redis:
    image: redis:7.2.4-alpine
    container_name: planit_redis
    restart: unless-stopped
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3

  # PostgreSQL database service
  postgres:
    image: postgres:15.5-alpine
    container_name: planit_postgres
    restart: unless-stopped
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-root}
      POSTGRES_DB: ${POSTGRES_DB:-planit_db}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=trust"
    networks:
      - network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}" ]
      interval: 10s
      timeout: 5s
      retries: 3

  # Backend Django service with optimized build
  backend:
    image: achrefmaarfi0/planit_backend_docker:latest
    container_name: planit_backend
    restart: unless-stopped
    ports:
      - "8080:8000"
    volumes:
      - media_files:/app/media
      - static_files:/app/staticfiles
    env_file:
      - .env
    networks:
      - network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "8000" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker service with optimized build
  celery_worker:
    image: achrefmaarfi0/planit_backend_docker:latest
    container_name: planit_celery_worker
    restart: unless-stopped
    volumes:
      - media_files:/app/media
    env_file:
      - .env
    command: >
      sh -c " echo 'Waiting for backend to be ready...'; while ! nc -z backend 8000; do sleep 2; done; echo 'Starting Celery worker...'; celery -A planit worker -l info "
    depends_on:
      backend:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: [ "CMD", "python", "-m", "celery", "-A", "planit", "inspect", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Beat service (for scheduled tasks) with optimized build
  celery_beat:
    image: achrefmaarfi0/planit_backend_docker:latest
    container_name: planit_celery_beat
    restart: unless-stopped
    volumes:
      - media_files:/app/media
    env_file:
      - .env
    command: >
      sh -c " echo 'Waiting for backend to be ready...'; while ! nc -z backend 8000; do sleep 2; done; echo 'Starting Celery beat...'; celery -A planit beat -l info "
    depends_on:
      backend:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: [ "CMD", "python", "-m", "celery", "-A", "planit", "inspect", "ping" ]
      interval: 60s
      timeout: 10s
      retries: 3

  # Frontend Next.js service with optimized build
  frontend:
    image: achrefmaarfi0/planit_frontend_docker:latest
    container_name: planit_frontend
    restart: unless-stopped
    ports:
      - "3100:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8081
      - PORT=3000
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - network
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "3000" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Nginx reverse proxy with health check
  nginx:
    image: nginx:alpine
    container_name: planit_nginx
    restart: unless-stopped
    ports:
      - "8081:80"
      - "8443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - static_files:/var/www/static:ro
      - media_files:/var/www/media:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      backend:
        condition: service_healthy
      # Remove frontend dependency to avoid circular issues
    networks:
      - network
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "80" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  redis_data:
  media_files:
  static_files:
  postgres_data:


networks:
  network:
    driver: bridge